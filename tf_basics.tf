TERRAFORM BASICS
-----------------

Chap 1 : Getting Started with Terraform
========================================

Terraform can be download, unziped and moved to bin folder to be launched

$ wget https://releases.hashicorp.com/terraform/0.13.0/terraform_0.13.0_linux_amd65.zip

$ unzip terraform_0.13.0_linux_amd65.zip

$ mv terraform /usr/local/bin

$ terraform version


Basics of HCL :

<block> <parameters> {
	key1 = value1
	key2 = value2
}

resource "local_file" "pet" {
	filename = "/root/pets.txt"
	content = "We love pets!"
}

resource = block name
local_file = Resource Type
	local = provider
	file = resource
pet = Resource Name

Terraform workflow consist of 4 steps : 1. Write the tf, 2. Launch the init, 3. Launch the plan, 4. Launch the apply

For a list of providers, visit the site :

https://registry.terraform.io/providers/hashicorp/local/latest/docs

-- Update and destroy infrastructure :

resource "local_file" "pet" {
	filename = "/root/pets.txt"
	content = "We love pets!"
	file_permission = "0700"
}

$ terraform destroy


Chap 2 : Terraform Basics
==========================

registry.terraform.io

provider url:

registry.terraform.io/hashicorp/local

registry.terraform.io = Hostname
hashicorp			  = Organizational Namespace
local  				  = Type


main.tf 		= main configuration file containing resource definition
variables.tf    = Contains variable declarations
outputs.tf 	    = Contains outputs from resources
provider.tf     = Contains Provider definition


--- Multiple providers and resources

resource "random_pet" "my-pet" {
	prefix = "Mrs"
	separator = "."
	length = "1"
}

resource "local_file" "pet" {
	filename = "/root/pets.txt"
	content = "We love pets!"
	file_permission = "0700"
}



--- Using Input Variables

main.tf
--

resource "random_pet" "my-pet" {
	prefix = var.prefix
	separator = var.separator
	length = var.length
}

resource "local_file" "pet" {
	filename = var.filename
	content = var.content
--
}



variables.tf
--


variable "filename" {
	default = "/root/pets.txt"
	type = string
	description = "the path of local file"
}

variable "content" {
	default = "We love pets!"
}

variable "prefix" {
	default = "Mrs"
}

variable "separator" {
	default = "."
}

variable "length" {
	default = "1"
}


Simple variable types are : string, number, bool, any
Additionnal variable types are :
	list 	= ["cat","dog"]
	map 	= pet1 = cat
		  	  pet2 = dog
	object  = complex data Structure
	tuple	= Complex data structure


variable "prefix" {
	default = ["Mr","Mrs","Sir"]
	type = list
}

resource "random_pet" "my-pet" {
	prefix = var.prefix[0]
}


map type variable :

variable file-content {
	type 	= map
	default = {
		"statement1" = "We love pets"
		"statement2" = "We love animals!"
	}
}

resource local_file my-pet {
	filename = "/root/pets.txt"
	content  = var.file-content["statement2"]
}


-- object

variable "bella" {
	type = object ({
		name = string
		color = string
		age = number
		food = list(string)
		favorite_pet = book
	})

	default = {
		name = "bella"
		color = "brown"
		age = 7
		food = ["fish","chicken"]
	}
}


-- tuple

variable kitty {
	type =	tuple([string, number, bool])
	default = ["cat",7,true]
}


Variables can be passed using :
	variable.tf
	command line flags
	environment variables
	terraform.tfvars  or terraform.tfvars.json
		can be automatically loaded via : *.auto.tfvars or *.auto.tfvars.json

Variable definition precedence

env variable > terraform.tfvars > *.auto.tfvars (alphabetical order) > -var or -var-file (command-line flag)



Resource Atributes
--

resource "local_file" "pet" {
	filename = var.filename
	content = "My favorite pet is ${random_pet.my-pet.id}"
}

resource "random_pet" "my-pet" {
	prefix = var.prefix
	separator = var.sperator
	length = var.length
}

//implicit dependency

Resource Dependencies
--


resource "local_file" "pet" {
	filename = var.filename
	content = "My favorite pet is Mr.Cat"

	depends_on = [
		random_pet.my-pet]
}

resource "random_pet" "my-pet" {
	prefix = var.prefix
	separator = var.sperator
	length = var.length
}

// Explicit Dependency



Output variables
---


resource "local_file" "pet" {
	filename = var.filename
	content = "My favorite pet is ${random_pet.my-pet.id}"
}

resource "random_pet" "my-pet" {
	prefix = var.prefix
	separator = var.sperator
	length = var.length
}

output pet-name {
	value = random_pet.my-pet.id
	description = "Record the value of pet ID generated by the random_pet resource"
}



Chap 3 : Terraform State
=========================



Introduction to Terraform State
--------------------------------

terraform.tfstate

- State file contains sensitive information
- No Manuel Edits



Chap 4 : Working with Terraform
=================================



4.1: Terraform commands :
--------------------------

$ terraform init
$ terraform plan
$ terraform apply

$ terraform validate
This checks configuration file for errors

$ terrform fmt
This commands scans the configuration directory and formats code in canonical format

$ terraform show
$ terraform state show local_file.file
Prints out the state of the infrastructure as seen by terraform (including all attirbutes)

$ terraform providers
To view all providers in a configuration

$ terraform providers mirror /root/terraform/new_local_file

$ terraform output

$ terraform output pet-name

$ terraform refresh
Used to sync terraform to the real world infrastructure. It only modifies the state file, not the infrastructure

$ terraform graph



4.2 : Mutable and immutable infrastructure
------------------------------

4.3 : LifeCycle rules
---------------------

 - create_before_destroy
 - prevent_destroy
 prevent_destroy only applies during subsequent $ terraform apply, $ terraform destroy will eventually delete 

 - ignore_changes
 



resource "local_file" "pet" {
	filename = "/root/pets.txt"
	content = "We love pets"
	file_permission = "0700"

	lifecycle {
	create_before_destroy = true
	}
}

resource "aws_instance" "webserver" {
	ami = "ami-0edab43b6fa892279"
	instance_type = "t2.micro"
	tags = {
		Name = "Project1-Webserver"
	}
	lifecycle {
		ignore_changes = [ tags,ami ]
		# ignore_changes = all
	}
}


4.4 : Datasources
-----------------

This allows terraform to read attributes from files that were created out of it's control

resource "local_file" "pet" {
	filename = "/root/pets.txt"
	content = data.local_file.dog.content
}

data "local_file" "dog" {
	filename = "/root/dog.txt"
}



4.5 : Meta-Arguments
---------------------

Can be used within any resource block, to change its behavior

4.5.1 :  Count
-------------

Used mainly to create multiple instances of a resource

resource "local_file" "pet" {
	filename = var.filename[count.index]

	count = length(var.filename)
}

output "pets" {
	value = local_file.pet
}

variable "filename" {
	default = [
			"/root/pets.txt",
			"/root/dogs.txt",
			"/root/cats.txt"
		]
}

resource "google_compute_instance" "Dev_VM" {
	count = 3
	name = "dev_VMS$(count.index + 1)"
}


4.5.2 : for-each
----------------



resource "local_file" "pet" {
	filename = each.value
	for_each = toset(var.filename)
}


variable "filename" {
	type = list(string)
	default = [
			"/root/pets.txt",
			"/root/dogs.txt",
			"/root/cats.txt"
		]
}

output "pets" {
	value = local_file.pet
}


resource "google_computer_instance" "dev_VM" {
	for_each = toset( ["us-central-1", "asia-east1-b", "europe-west4-a"])
	name 	 = "dev-$(each.value)"

	zone 	 = each.value
}

4.6 : Verion constrains
------------------------


terraform {
	required_provides {
		local = {
			source = "hashicorp/local"
			version = "1.4.0"
			# version  = "!= 2.0.0"
			# version  = " < 1.4.0"
			# version  = " > 1.4.0"
			# version  = "> 1.2.0, < 2.0.0, != 1.4.0"
			# version  = "~> 1.2"
		}
	}
}



Chap 5 : Terraform with AWS
============================



5.1 : Getting Started with AWS
5.2 : Demo Setup and AWS Account
5.3 : Introduction to IAM


AWS IAM with Terraform 
--------

provider "aws" {
	region = "us-west-2"
	access_key = "AKIAI44QH8DHBEXAMPLE"
	secret_key = "je7MtGbC1wBF/2tk/h3yCo8n..."
}

resource "aws_iam_user" "admin_user" {
	name = "lucy"
	tags = {
		Description = "Technical Team Leader"
	}
}


IAM Policies with Terraform
---------------------------

main.tf:
---
resource "aws_iam_user" "admin_user" {
	name = "lucy"
	tags = {
		Description = "Technical Team Leader"
	}
}

resource "aws_iam_policy" "adminUser" {
	name = "AdminUsers"
	policy = file("admin-policy.json")
}

resource "aws_iam_user_policy_attachment" "lucy-admin-access" {
	user = aws_iam_user.admin-user.name
	policy_arn = aws_iam_policy.adminUser.arn
}


admin-policy.tf:
---
	{
		"Version": "2012-10-17",
		"Statement": [
			{
				"Effect": "Allow",
				"Action": "*",
				"Resource": "*"
			}
		]
	}





Introduction to AWS S3
--------

Simple Storage Service


S3 with Terraform
---------

resource "aws_s3_bucket" "finance" {
	bucket = "finance-21092020"
	tag = {
		Description =  "Finance and Payroll"
	}
}


resource "aws_s3_bucket_object" "finance-2020" {
	content = "/root/finance/finance-2020.doc"
	key = "finance-2020.doc"
	buclet = aws_s3_bucket.finance.id
}


data "aws_iam_group" "finance_data" {
	group_name = "finance-analysts"
}

resource "aws_s3_bucket_policy" "finance-policy" {
	bucket = aws_S3_bucket.finance.id
	policy = file("policy.json")
}


DynamoDb with Terraform
---


resource "aws_dynamodb_table" "cars" {
	name = "cars"
	hash_key = "VIN"
	billing_mode = "PAY_PER_REQUEST"
	attribute = {
		name = "VIN"
		type = "S"
	}
}


resource "aws_dynamodb_table-item" "car-items" {
	table_name = aws_dynamodb_table.cars.name
	hash_key = aws_dynamodb_table.cars.hash_key
	item = << EOF
	{
		"Manufacturer": {"S":"Toyota"},
		"Make": {"S":"Corolla"},
		"Year": {"N":"2004"},
		"VIN": {"S":"4y1sl65848z411439"},
	}
	EOF
}





Chap 6 : REMOTE STATE
=======================


6.1 : state locking
Do not store terraform state file in version control systems, because they do not support state locking


6.2 : Remote Backends with S3

Pre-requisities:
- An S3 bucket
- A dynamo db database

main.tf
---

resource "local_file" "pet" {
	filename = "/root/pets.txt"
	content = "We love pets!"
}
// local state file is created

terraform {
	backend "s3" {
		bucket 			= "kodekloud-terraform-state-bucket01"
		key     		= "finance/terraform.tfstate"
		regions 		= "us-west-1"
		dynamdb_table   = "state-locking"
	}
}

variable remote-state {
    type = string
    default = "remote"
}
variable local-state {
    type = string
    default = "local"
}



6.3 : Terraform state commands

$ terraform state show aws_s3_bucket.finance
syntax :  # terraform state <subcommand> [options] [args]


subcommands : list, mv, pull, rm, rm, show

$ terraform state list
give resources in state file

$ terraform state show aws_s3_bucket.finance
Gives details on a particular resource in a state file

$ terraform state mv [options] SOURCE DESTINATE
Used to move items in a terraform state file

To change a resource name in state file
$ terraform state mv aws_dynamodb_table.state-locking aws_dynamodb_table.state-locking-db

To view content of remote state, use terraform pull
$ terraform state pull

To delete items from a terraform state file
$ terraform state rm ADDRESS

terraform state mv random_pet.super_pet_1 random_pet.ultra_pet





Chap 7 : Terraform Provisioners
===================================

The provide ways to run tasks on remote resources

main.tf
---


resource "aws_instance" "webserver" {
	ami = "ami-0eda..."
	instance_type = "t2.micro"
	tags = {
		Name = "webserver"
		Description = "An nginx server"
	}
	user_data = <<-EOF
				#!/bin/bash
				sudo apt update
				sudo apt install nginx -y
				systemctl enable nginx
				systemctl start nginx
				EOF
	key_name = aws_key_pair.web.id
}

resource "aws_key_pair" "web" {
	public_key = file("/root/.ssh/web.pub")
}




provider.tf
---

provider "aws" {
	region = "us-west-1"
}



7.1 : Terraform Provisioners

Remote Exec

resource "aws_instance" "webserver" {
	ami 		= "ami-0edab43...."
	instance_type = "t2.micro"

	provisioner "remote-exec" {
		inline = [ "sudo apt update",
				   "sudo apt install nginx -y",
				   "sudo systemctl enable nginx",
				   "sudo systemctl start nginx",
			     ]
	}

	connection {
		type 	= "ssh"
		host 	= "self.public_ip"
		user 	= "ubuntu"
		private_key = file("/root/.ssh/web")
	}

	key_name = aws_key_par.web.id
	vps_security_group_ids = [ aws_security_group.ssh-access.id ]
}




Local Exec

resource "aws_instance" "webserver" {
	ami 		= "ami-0edab..."
	instance_type = "t2.micro"

	provisioner "local-exec" {
		on_failure = fail
		command = "echo ${aws_instance.webserver.publib_ip} >> /tmp/ups.txt"
	}
}


7.2 = Provisioner Behavior
----------------------


Destroy Time Provisioner

esource "aws_instance" "webserver" {
	ami 		= "ami-0edab..."
	instance_type = "t2.micro"

	provisioner "local_exec" {
		on_failure = fail
		#on_failure = continue // to override the default behavior of apply to fail when the provisioner fails
		command = "echo ${aws_instance.webserver.publib_ip} >> /tmp/ups.txt"
	}

	provisioner "local-exec" {
		when = destroy
		command = "echo Instance ${aws_instance.webserver.public_ip} Destroyed! > /tmp/instance_state.txt"
	}
}



Chap 8: Terraform Import, Tainting Resources and Debugging
===========================================================

8.1 : Terraform Taint

When a resource creation fails during apply, terraform marks the resource as tainted
As a result, terraform will try to recreate it during subsequent apply

We might want to force a resource to be recreated, we can use the following command :

$ terraform taint aws_instance.webserver

To undo a tain

$ terraform untaint aws_instance.webserver




8.2 Debugging

Log Levels : INFO, WARNING, ERROR, DEBUG, TRACE

$ export TF_LOG=TRACE
$ exoirt TF_LOG_PATH=/tmp/terraform.log

To disable loggin, unset the variable

$ unset TF_LOG_PATH


8.3: Terraform Import


$ terraform import <resource_type>.<resource_name> <attribute or id>

$ terraform import aws_instance.webserver-2 i-026e13be10d5326f7

Then, write an empty resource block


aws ec2 describe-instances --endpoint http://aws:4566
	"InstanceId": "i-72f3abdfe62026a2e"







Chap 9 : Terraform Modules
============================

9.1: What are Modules

A configuration directory containing a set of configuration files is called a module.

module "dev-webserver" {
	source = "../aws-instance"
}



9.2:  Creating and using a module

mkdir /root/terraform-projects/modules/payroll-app

app_server.tf dynamodb_table.tf s3_bucket.tf variables.tf


module "us-payroll" {
	source = "../modules/payroll-app"
	app_region = "us-west-2"
	ami = "ami-35e140119877avm"
}



9.3: Using Modules from Registry


module "security-group_ssh" {
	source = "terraform-aws-modules/security-group/aws/modules/ssh"
	version = "3.16.0"
	vpc_id = "vpc-7d8d215"
	ingress_cidr_blocks = [ "10.10.0.0/16"]
	name = "ssh-access"
}



$ terraform get
Will download module provider plugins from terraform registry



Chap 10 : Terraform Functions and COndition-expressions
=========================================================

9.1 : More Terraform Functions

Terraform provides an interactive console that can be used to test functions and interpolations

$ terraform console

Some commonly used functions

Numeric functions :

$ terraform console
> max(-1,2,-10,200,-250)
200

> min(-1,2,-10,200,-250)
-250

> ceil(10.1)
11

> ceil(10.9)
11

> floor(10.1)
10

> floor(10.1)
10


String functions : 

variable "ami" {
	type = string
	default = "ami-xyz, AMI-ABC, ami-efg"
	description = "A string containing ami ids"
}

$ terraform console

> split(",","ami-xyz, AMI-ABC, ami-efg")
["ami-xyz", "AMI-ABC", "ami-efg"]


> split(",", var.ami)
["ami-xyz", "AMI-ABC", "ami-efg"]

> lower(var.ami)
//To lower cases

> upper(var.ami)
//To upper cases

> title(var.ami)
//All first letters as capitables

> substr(var.ami, 0, 7)
ami-xyz

> substr(var.ami, 8, 7)
AMI-ABC

> substr(var.ami, 16, 7)
ami-efg

> join(",", var.ami)


Collection functions :

$ terraform console

> length(var.ami)
3

> index(var.ami, "AMI-ABC")
1

> element(var.ami, 2)
ami-efg

> contains(var.ami,"AMI-ABC")
true

> contains(var.ami,"AMI-XYZ")
false


Map Functions :


var "ami" {
	type = map
	default = { "us-east-1" = "ami-xyz",
				"ca-central-1" = "ami-efg",
				"ap-south-1" = "ami-ABS"

	}
	description = "A map of AMI ID's for specific regions"
}


$ terraform console

> keys(var.ami) // to convert map to a list
[
	"ap-south-1",
	"ca-central-1"
	"ap-south-1"
]

> values(var.ami)
[
	"ami-xyz",
	"ami-efg",
	"ami-ABS"
]

> lookup(var.ami, "ca-central-1")
ami-efg

A default value can be set if key is not in map
> lookup(var.ami, "us-central-1","ami-pqr")
ami-pqr



9.2 : Conditional Expressions

$ terraform console

> 1 + 2
3

Equality Operators

> 8 == 8
true

> 8 == 7
false

> 8 != "8"
true

> 5 > 7
true

< 3 <= 4
true

Logical Operators

> 8 > 7 && 8 < 10
true

> 8 > 10 && 8 < 10 
false

> 8 > 9 || 8 < 10
True

variable special {
		type = bool
		default = true
		description = "Set to true to use special carac"
}


> var.special
true

> ! var.special
false

---
variable b {
	type = number
	default = 25
}

--



> ! (var.b) > 30
true

---
variable a {
	type = number
	default = 50
}


variable b {
	type = number
	default = 25
}
--


> var.a < var.b
false

> var.a + var.b
75


main.tf
-----


resource "random_password" "password_generator" {
	length = var.length
}

output password {
	value = random_password.password_generator.result
}



variables.tf
---

variable length {
	type 	= number
	description = "The length of the password"
}


Condition expressions in terraform

condition ? true_val : false_val

main.tf
-----


resource "random_password" "password_generator" {
	length = var.length < 8 ? 8 : var.length
}

output password {
	value = random_password.password_generator.result
}


$ terraform apply -var-length=5





9.3 : Terraform Workspaces


You can use the same configuration directory to create multiple infrastructure environments

$ terraform workspace new ProjectA

$ terraform workspace new ProjectB

$ terraform workspace list

$ terraform workspace select ProjectB
//To Switch to another project

$ terraform console
> terraform.workspace
ProjectA


variables.tf
---

variable region {
	default = "ca-central-1"
}

variable instance_type {
	default = "t2.micro"
}

variable map {
	type = map
	default = {
		"ProjectA" = "ami-0edab43b6fa892279"
		"ProjectB" = "ami-0c2f25c1f66a1ff4d"
	} 
}


main.tf
---

resource "aws_instance" "projectA" {
	ami = lookup(var.ami, terraform.workspace)
	instance_type = var.instance_type
	tags = {
		Name = terraform.workspace
	}
}


